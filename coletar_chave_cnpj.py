import os
import sys
from pathlib import Path
import xml.etree.ElementTree as ET

# ===================== CONFIGURAÇÕES ==========================================
# Raiz onde estão os XMLs (será varrida recursivamente)
ROOT_DIR = r"C:\Users\conta\Downloads"

# Liste AQUI as CHAVES de acesso (44 dígitos), na ORDEM desejada:
CHAVES_ALVO = [
    "52241208601888000120550010000279631413789431",
    "52241201377514000123550010000437381430645579",
    "52241201377514000123550010000437651373149420",
    "52241225464260000300550010000504371150504370",
    "52241225464260000300550010000507031150507032",
    "52241225464260000300550010000507701150507701",
    "17241202060218000167550010002169051003751340",
    "17240400071815000919550010000034481976344470",
    "17240400071815000919550010000034541988135593",
    "17240400071815000919550010000034571304851838",
    "17240400071815000919550010000034591413057754",
    "17240406116723004043550010000016671583981301",
    "17240406116723004043550010000016681192311704",
    "17240406116723004043550010000017261975096884",
    "17240506116723004043550010000017711627534358",
    "17240506116723004043550010000017721492780825",
    "17240500071815000919550010000035461614490790",
    "17240500071815000919550010000035551231588614",
    "17240500071815000919550010000035641580778663",
    "17240500071815000919550010000035701494315550",
    "17240500071815000919550010000035901999732763",
    "17240500071815000919550010000036151597006988",
    "17240500071815000919550010000036171659072452",
    "17240500071815000919550010000036491101130462",
    "17240500071815000919550010000036841527462540",
    "17240500071815000919550010000037511867476606",
    "17240500071815000919550010000037611796481021",
    "17240500071815000919550010000037621936111814",
    "17240500071815000919550010000037691554810730",
    "17240500071815000919550010000037701519189422",
    "17240500071815000919550010000037801561228240",
    "17240500071815000919550010000037811491172788",
    "29240508938255000888550010000422051694987769",
    "29240508938255000888550010000422061987110965",
    "35240560744463001080550000011517431532298845",
    "35240560744463001080550000011526021017782356",
    "35240560744463001080550000011526191335172940",
    "17240647180625006268550050000010381220089076",
    "17240647180625006268550050000010401062854492",
    "17240647180625006268550050000010411170235878",
    "17240647180625006268550050000010521706252192",
    "17240647180625006268550050000010641417644637",
    "17240600071815000919550010000038231254931338",
    "17240600071815000919550010000038241222775605",
    "29240608938255000888550010000422211475576728",
    "29240608938255000888550010000423201425775741",
    "52240747180625005881550050000044191002606552",
    "52240747180625005881550050000044201423202092",
    "52240747180625005881550050000046461471131296",
    "52240747180625005881550050000046491338246160",
    "52240707467822000983551100000068001226137516",
    "52240704136367000600550090000159581439087420",
    "52240704136367000600550090000159721420301680",
    "52240704136367000600550090000159731849314997",
    "52240704136367000600550090000160811201945993",
    "52240704136367000600550090000160821724969054",
    "52240704136367000600550090000160991144080911",
    "35240707467822001289551070000281841720213352",
    "35240707467822001289551070000281851722679518",
    "52240760744463007283550000001364181946806307",
    "52240809100671001251550010000006501860851020",
    "17240847180625006268550050000018041124739629",
    "17240847180625006268550050000018911942748707",
    "17240847180625006268550050000018921930276780",
    "17240847180625006268550050000018931104698617",
    "17240847180625006268550050000019151145465454",
    "17240847180625006268550050000019191360950131",
    "17240847180625006268550050000023111781606589",
    "17240847180625006268550050000023151792684283",
    "52240818459628010188550010000029561752998391",
    "52240818459628010188550010000030611748578559",
    "52240847180625005881550050000049051146860516",
    "52240861142550000300550030000076601871059177",
    "52240861142550000300550030000077021947743407",
    "52240802290510001571550010000315721262605252",
    "52240802290510001571550010000315731263059674",
    "31240823361306000179550040000851281014553179",
    "31240823361306000179550040000851291791430922",
    "31240823361306000179550040000851301049189099",
    "31240823361306000179550040000851311545517969",
    "31240823361306000179550040000851321952982099",
    "31240823361306000179550040000851331383014708",
    "31240823361306000179550040000851341276166560",
    "31240823361306000179550040000851351646520379",
    "31240823361306000179550040000851361482484674",
    "31240809100671000107550020001762111213302412",
    "41240802290510000176550010003170841923302885",
    "41240802290510000176550010003170851206877691",
    "41240802290510000176550010003170871075448827",
    "17240905280269001164550010000000211819201716",
    "17240905280269001164550010000000221310671343",
    "17240961142550002507550030000005041095318958",
    "31240919471981000426550010000012211149263954",
    "17240906116723004043550010000019421329279264",
    "17240906116723004043550010000019431415489961",
    "17240906116723004043550010000019441853878753",
    "17240906116723004043550010000019561735430028",
    "17240947180625006268550050000027401871451425",
    "17240947180625006268550050000028611976381732",
    "17240947180625006268550050000029181488809118",
    "17240947180625006268550050000029191342155986",
    "17240947180625006268550050000029201439637706",
    "52240910486463000673550010000033311796811079",
    "52240910486463000673550010000033341014435670",
    "52240910486463000673550010000033431815231720",
    "52240910486463000673550010000033501441822907",
    "52240910486463000673550010000033691702020037",
    "52240910486463000673550010000033701650195932",
    "52240908811946000140550010000038041328410858",
    "35240901789121001107550000000098501417144676",
    "35240901789121001107550000000099661545086410",
    "35240947180625006349550050000113191330802067",
    "35240947180625006349550050000126411607851500",
    "41240919471981000183550010000289101486108581",
    "41240919471981000183550010000289151112561950",
    "41240919471981000183550010000289171636390601",
    "52240930190221000130550010000367431429973074",
    "52240900808899000173550010000973871826146465",
    "52240900808899000173550010000973881632280155",
    "52240900808899000173550010000973891840219053",
    "41240975263400000199550010002336331177102326",
    "17241061142550002507550030000005881986960266",
    "17241048782693000148550010000013321394358755",
    "17241048782693000148550010000013501090689202",
    "17241048782693000148550010000013501090689202",
    "17241048782693000148550010000013501090689202",
    "17241048782693000148550010000013511775863221",
    "17241048782693000148550010000013511775863221",
    "17241048782693000148550010000013511775863221",
    "17241048782693000148550010000013721218781344",
    "17241048782693000148550010000013721218781344",
    "17241048782693000148550010000013721218781344",
    "17241048782693000148550010000013881304831508",
    "17241048782693000148550010000013881304831508",
    "17241048782693000148550010000013881304831508",
    "17241048782693000148550010000013901101663056",
    "17241048782693000148550010000013901101663056",
    "17241048782693000148550010000013901101663056",
    "17241006116723004043550010000020741951299590",
    "17241006116723004043550010000021521407810233",
    "17241006116723004043550010000021531137583970",
    "17241006116723004043550010000021901913424110",
    "17241006116723004043550010000021911565004686",
    "17241006116723004043550010000022081810715054",
    "17241006116723004043550010000022091273126753",
    "52241024332154000149550010000024961478410102",
    "52241024332154000149550010000024971568410109",
    "52241024332154000149550010000024981858410109",
    "52241008811946000140550010000038381408411107",
    "52241008811946000140550010000038391798411104",
    "52241008811946000140550010000038401608411109",
    "52241008811946000140550010000039201488411100",
    "52241008811946000140550010000039211618411101",
    "52241008811946000140550010000039221518411107",
    "52241010486463000673550010000039961012983994",
    "52241010486463000673550010000039971835817782",
    "52241010486463000673550010000039981372325365",
    "52241018459628010188550010000046551541434993",
    "17241002974733001205550010000069531484749521",
    "35241010486463000401550010000071561382206936",
    "35241008938255001183550010000124901321020357",
    "51241008938255000373550010000148861215812549",
    "41240919471981000183550010000290561945606629",
    "41240919471981000183550010000290581606283333",
    "29241008938255000888550010000443971164222839",
    "29241008938255000888550010000443981806453580",
    "29241008938255000888550010000443991560060330",
    "29241008938255000888550010000444001357632920",
    "29241008938255000888550010000444011755719454",
    "29241008938255000888550010000444021108843965",
    "52241060744463007283550000001422151007402148",
    "52241060744463007283550000001422341619923004",
    "52241060744463007283550000001435831930092548",
    "31241009100671000107550020001793561014564403",
    "31241009100671000107550020001795061045672444",
    "41241075263400000199550010002368331202757224",
    "52241100808899001307550010000001921382073982",
    "17241106116723004043550010000023401035557578",
    "17241106116723004043550010000023411035860448",
    "52241110486463000673550010000042761961135652",
    "17241102974733001205550010000072311897649105",
    "17241152226073002909550010000240771983938562",
    "17241152226073002909550010000240771983938562",
    "41241119471981000183550010000303421399859971",
    "17241126677742000301550010000418711004563370",
    "17241126677742000301550010000418711004563370",
    "17241126677742000301550010000418711004563370",
    "17241100970771001264550010000620891801042854",
    "17241100970771001264550010000620891801042854",
    "52241101608488001250550010000989321700940417",
    "52241101608488001250550010000989321700940417",
    "52241101608488001250550010000993931622640454",
    "52241101608488001250550010000993951731034312",
    "41241175263400000199550010002380121430107835",
    "52241101608488000954550010004585011962311808",
    "52241101608488000954550010004585011962311808",
    "52241101608488000954550010004585011962311808",
    "52241101608488000954550010004585011962311808",
    "52241101608488000954550010004585331730480590",
    "52241101608488000954550010004585331730480590",
    "52241101608488000954550010004585331730480590",
    "52241101608488000954550010004585331730480590",
    "17241202819759000207550030000000281237732823",
    "17241202819759000207550030000000291521125216",
    "17241202819759000207550030000000301561070430",
    "17241202819759000207550030000000311562109604",
    "17241202819759000207550030000000321851027884",
    "17241202819759000207550030000000331646331051",
    "17241202819759000207550030000000551521125216",
    "17241202819759000207550020000000741760547757",
    "17241248353406000184550010000013771048779509",
    "17241248353406000184550010000014051829656554",
    "17241248353406000184550010000014361999851680",
    "17241248353406000184550010000014371807975707",
    "52241240221630000100550010000045801120470023",
    "52241210486463000673550010000047921590776153",
    "52241210486463000673550010000047931825396824",
    "52241210486463000673550010000047941031615950",
    "52241210486463000673550010000048211838014638",
    "52241201976860007483550900000061841134102037",
    "35241225259494000154550010000066211686116360",
    "35241225259494000154550010000066221299501942",
    "17241226195088000138550010000134871132895196",
    "17241226195088000138550010000134881923593478",
    "52241228959772000174550010000167501551167503",
    "52241228959772000174550010000167511551167519",
    "52241228959772000174550010000167761551167763",
    "52241228959772000174550010000168641551168640",
    "52241228959772000174550010000168691551168698",
    "52241228959772000174550010000169861551169860",
    "52241228959772000174550010000169921551169922",
    "52241228959772000174550010000169961551169964",
    "52241228959772000174550010000169971551169970",
    "52241207540111000563550010000260031000333710",
    "52241205405388000124550010000282591087235624",
    "52241205405388000124550010000282821087645715",
    "41241219471981000183550010000310681437023160",
    "41241219471981000183550010000310691109987020",
    "41241219471981000183550010000310701697596150",
    "17241201810548000160550010000410461008072986",
    "17241201810548000160550010000410591005430480",
    "17241217897655000107550010000411421000021890",
    "17241217897655000107550010000411721000022195",
    "17241217897655000107550010000411771000022248",
    "17241201810548000160550010000411871007329396",
    "17241217897655000107550010000411921000022392",
    "17241217897655000107550010000412101000022570",
    "52241208250241000524550010000415071991709220",
    "52241208250241000524550010000415281903586295",
    "52241208250241000524550010000416421628332814",
    "17241226677742000301550010000421281004597745",
    "17241226677742000301550010000422421004611505",
    "17241226677742000301550010000422991004618065",
    "17241226677742000301550010000422991004618065",
    "17241226677742000301550010000424051004629053",
    "35241265011967000114550010000551911945465308",
    "35241265011967000114550010000551921183354804",
    "35241265011967000114550010000552051422754301",
    "17241200896274000100550010000588391000754498",
    "17241200896274000100550010000588641000754911",
    "17241200896274000100550010000588921000755300",
    "17241200896274000100550010000589811000756651",
    "17241200896274000100550010000589901000756774",
    "17241200896274000100550010000590121000757214",
    "17241200970771001264550010000627991222331984",
    "17241200970771001264550010000628381655717633",
    "17241200970771001264550010000628531261867888",
    "17241200970771001264550010000628551642902985",
    "17241200970771001264550010000628791372075560",
    "17241200970771001264550010000628991728298371",
    "17241200970771001264550010000629021522819900",
    "17241200970771001264550010000629031658295624",
    "17241200970771001264550010000629551203825566",
    "17241200970771001264550010000629721494915398",
    "17241200970771001264550010000629751613504673",
    "17241200970771001264550010000630061194891302",
    "17241200970771001264550010000630161640558392",
    "17241200970771001264550010000630181247868076",
    "17241200970771001264550010000630421189107700",
    "17241200970771001264550010000630571640480744",
    "17241200970771001264550010000630731985608102",
    "17241200970771001264550010000630741179694348",
    "17241200970771001264550010000631011427483910",
    "17241200970771001264550010000631041977919313",
    "17241200970771001264550010000631051910138090",
    "17241200970771001264550010000631931548179113",
    "17241200970771001264550010000631961583501974",
    "17241200970771001264550010000632271436128649",
    "17241200970771001264550010000632281992695959",
    "17241200970771001264550010000632641520555866",
    "17241200970771001507550010000819361608776167",
    "17241200970771001507550010000823581292650001",
    "52241201608488001250550010000994211257158449",
    "52241201608488001250550010000994211257158449",
    "52241201608488001250550010000994211257158449",
    "52241201608488001250550010000994211257158449",
    "52241201608488001250550010000994491959780256",
    "52241260744463007283550000001489491118740115",
    "52241260744463007283550000001497651327347880",
    "52241260744463007283550000001497951020281976",
    "52241202064095000132550030001867211592087915",
    "52241202064095000132550030001867221208190375",
    "52241207540111000130550010003539801000337167",
    "52241207540111000130550010003543871000348030",
    "52241207540111000130550010003543881000348045",
    "52241207540111000130550010003543901000348078",
    "52241207540111000130550010003547311000360117",
    "52241207540111000130550010003547511000360527",
    "52241201608488000954550010004587501356691449",
    "52241201608488000954550010004588531572765436",
    "52241201608488000954550010004589671668294214",
    "52241201608488000954550010004591961891688149",
    "52241201608488000954550010004594361689592681",
    "52241201608488000954550010004594821698129410",
    "52241201608488000954550010004597691850348225",
    "52241201608488000954550010004603661976343175",
    "52241201608488000954550010004607431244505638",
    "53241234274233001257550000021180151945932087",
    "53241234274233001257550000021180201946135784",
    "53241234274233001257550000021180261946041767",
    "52241234274233030605550000022241371741235955",

]

# Arquivo TXT de saída (será criado/reescrito na pasta do script)
ARQUIVO_SAIDA = "resultado.txt"

# Se True, escreve "CHAVE NAO_ENCONTRADA" quando não achar a chave; se False, pula a linha
GRAVAR_LINHAS_QUANDO_NAO_ENCONTRAR = True

# Se True, mostra no console quantos XMLs já foram indexados (barra de progresso simples)
MOSTRAR_PROGRESSO = True
# ==============================================================================


def _strip_ns(tag: str) -> str:
    """Remove namespace de uma tag XML ('{ns}infNFe' -> 'infNFe')."""
    return tag.split("}")[-1] if "}" in tag else tag


def _iter_all(elem: ET.Element, tag_endswith: str):
    """Itera elementos cuja tag (sem namespace) seja exatamente 'tag_endswith'."""
    for e in elem.iter():
        if _strip_ns(e.tag) == tag_endswith:
            yield e


def _find_first(elem: ET.Element, tag_endswith: str):
    """Retorna o primeiro elemento com a tag (sem namespace) == 'tag_endswith'."""
    for e in _iter_all(elem, tag_endswith):
        return e
    return None


def _somente_digitos(s: str) -> str:
    return "".join(ch for ch in s if ch.isdigit())


def extrair_chave_e_cnpj_de_arvore(root: ET.Element) -> tuple[str | None, str | None]:
    """
    Extrai:
      - CHAVE (44 dígitos) a partir de infNFe/@Id (geralmente "NFe"+44d) ou chNFe;
      - CNPJ do emitente em emit/CNPJ.
    Retorna (chave, cnpj) — qualquer um pode ser None se não encontrado.
    """
    # --- CHAVE: tentar infNFe/@Id ---
    chave = None
    infNFe = _find_first(root, "infNFe")
    if infNFe is not None:
        id_attr = infNFe.attrib.get("Id") or infNFe.attrib.get("id")
        if id_attr:
            possivel = id_attr[3:] if id_attr.startswith("NFe") else id_attr
            possivel = _somente_digitos(possivel)
            if len(possivel) == 44:
                chave = possivel

    # --- fallback: chNFe (ex.: em protNFe/infProt/chNFe) ---
    if not chave:
        ch_el = _find_first(root, "chNFe")
        if ch_el is not None and (ch_el.text or "").strip():
            possivel = _somente_digitos(ch_el.text.strip())
            if len(possivel) == 44:
                chave = possivel

    # --- CNPJ do emitente ---
    cnpj = None
    emit = _find_first(root, "emit")
    if emit is not None:
        cnpj_el = _find_first(emit, "CNPJ")
        if cnpj_el is not None and (cnpj_el.text or "").strip():
            cnpj = _somente_digitos(cnpj_el.text)
            # normalizar (se vier com ruído a mais)
            if len(cnpj) > 14:
                cnpj = cnpj[-14:]

    return chave, cnpj


def extrair_chave_e_cnpj_de_arquivo(path_xml: Path) -> tuple[str | None, str | None]:
    """Abre e faz parsing do XML, retornando (chave, cnpj)."""
    try:
        tree = ET.parse(path_xml)
        return extrair_chave_e_cnpj_de_arvore(tree.getroot())
    except Exception as e:
        print(f"[ERRO] Falha ao processar {path_xml}: {e}")
        return None, None


def indexar_por_chave(root_dir: Path) -> dict[str, tuple[str | None, Path]]:
    """
    Varre todas as subpastas e monta um índice:
      indice[chave] = (cnpj, caminho_xml)

    Observações:
      - Se existirem XMLs duplicados com a mesma chave, mantém o primeiro encontrado.
      - Se um XML não tiver chave válida (44 dígitos), é ignorado.
    """
    indice: dict[str, tuple[str | None, Path]] = {}
    total_xml = 0

    for dirpath, _, filenames in os.walk(root_dir):
        for fname in filenames:
            if not fname.lower().endswith(".xml"):
                continue
            total_xml += 1
            path_xml = Path(dirpath) / fname
            chave, cnpj = extrair_chave_e_cnpj_de_arquivo(path_xml)
            if chave and len(chave) == 44:
                # não sobrescrever se já houver (preserva o primeiro)
                if chave not in indice:
                    indice[chave] = (cnpj, path_xml)

            if MOSTRAR_PROGRESSO and total_xml % 100 == 0:
                print(f"[INFO] Indexados {total_xml} XML(s)...")

    if MOSTRAR_PROGRESSO:
        print(f"[INFO] Indexação concluída. XMLs lidos: {total_xml}. Chaves únicas: {len(indice)}.")
    return indice


def main():
    # validações
    if not CHAVES_ALVO:
        print("[AVISO] A lista CHAVES_ALVO está vazia. Preencha antes de executar.")
        sys.exit(1)

    root = Path(ROOT_DIR)
    if not root.exists():
        print(f"[ERRO] Caminho raiz não encontrado: {root}")
        sys.exit(1)

    print("[INFO] Varrendo e indexando XMLs por CHAVE...")
    indice = indexar_por_chave(root)

    saida_path = Path(__file__).parent / ARQUIVO_SAIDA
    linhas_saida: list[str] = []

    # respeita a ordem fornecida em CHAVES_ALVO
    for chave in CHAVES_ALVO:
        chave_norm = _somente_digitos(chave)
        if len(chave_norm) != 44:
            print(f"[CHAVE INVÁLIDA] '{chave}' (não tem 44 dígitos)")
            if GRAVAR_LINHAS_QUANDO_NAO_ENCONTRAR:
                linhas_saida.append(f"{chave} CHAVE_INVALIDA")
            continue

        tupla = indice.get(chave_norm)
        if not tupla:
            print(f"[NAO ENCONTRADA] {chave_norm}")
            if GRAVAR_LINHAS_QUANDO_NAO_ENCONTRAR:
                linhas_saida.append(f"{chave_norm} NAO_ENCONTRADA")
            continue

        cnpj, caminho_xml = tupla
        if not cnpj or len(cnpj) != 14:
            print(f"[INCOMPLETO] {chave_norm} -> CNPJ ausente/inválido no XML {caminho_xml.name}")
            if GRAVAR_LINHAS_QUANDO_NAO_ENCONTRAR:
                linhas_saida.append(f"{chave_norm} CNPJ_INCOMPLETO")
            continue

        linhas_saida.append(f"{chave_norm} {cnpj}")

    with open(saida_path, "w", encoding="utf-8-sig") as f:
        for linha in linhas_saida:
            f.write(linha + "\n")

    print(f"[OK] Gerado: {saida_path} ({len(linhas_saida)} linha(s)).")


if __name__ == "__main__":
    main()
